plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

def FEATURE_SHARE_SUPPORT_FILES = 'ShareSupportFilesFeature'

// AVAILABLE_FEATURES contains the superset of Features present in the TestApp.
def AVAILABLE_FEATURES = [FEATURE_SHARE_SUPPORT_FILES]

// apply from: file('publish.gradle')
apply from: file('jacoco.gradle')
apply from: file('local_linking.gradle')

android {
    compileSdkVersion 33
    resourcePrefix 'azure_communication_ui_calling_'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        buildConfig = false
        resValues = false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "releaseType"

    productFlavors {
        alpha {
            dimension "releaseType"
        }

        beta {
            dimension "releaseType"
            ext.enabledFeatures = [
                    FEATURE_SHARE_SUPPORT_FILES
            ]
        }

        ga {
            dimension "releaseType"            
        }
    }

    // Using the ext.enabledFeatures property for each flavor, assign the correct implementation
    // for each Feature, whether it's implemented or a dummy.
    // This applies to code, resources and assets if available.
    productFlavors.all { flavor ->
        if (flavor.hasProperty('enabledFeatures')) {
            def flavorSourceSets = project.android.sourceSets.getByName(flavor.name)
            // Iterate through the list of all the available features in the TestApp
            for (String featureName : AVAILABLE_FEATURES) {
                // By default, use dummy implementations for the feature.
                def implFolder = "dummy"
                if (flavor.enabledFeatures.contains(featureName)) {
                    // If the android flavor (release channel) indicates it contains the
                    // feature through ext.enabledFeatures, add the full implementation
                    // instead of the dummy one
                    implFolder = "features"
                }

                // Add the SourceSets for the feature to the android flavor.
                flavorSourceSets.java.srcDirs "src/${implFolder}/${featureName}/java"
                flavorSourceSets.res.srcDirs "src/${implFolder}/${featureName}/res"
                flavorSourceSets.assets.srcDirs "src/${implFolder}/${featureName}/assets"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi"
        ]
    }

    testOptions {
        packagingOptions {
            jniLibs {
                useLegacyPackaging = true
            }
        }
        unitTests {
            returnDefaultValues = true
            all {
                failFast = true
            }
        }
    }

    ktlint {
        debug.set(false)
        verbose.set(true)
        android.set(true)
        outputToConsole.set(true)
        outputColorName.set("RED")
        enableExperimentalRules.set(false)
        disabledRules = ["import-ordering", "max-line-length", "parameter-list-wrapping"]
        reporters {
            reporter "checkstyle"
            reporter "plain"
        }
        filter {
            exclude({ it.file.absolutePath.contains("/generated/") })
        }
    }

    if (!shouldByPassMavenPublish()) {
        publishing {
            multipleVariants('release') {
                withSourcesJar()
                withJavadocJar()
                includeBuildTypeValues('release')
            }
        }
    }
}


dependencies {

    if(hasLocalAlpha) {
        alphaApi(name: alphaLib, ext: 'aar')
        alphaApi 'com.azure.android:azure-communication-common:1.1.0'
    }
    else {
        alphaApi ("com.azure.android:azure-communication-calling:$azure_calling_sdk_version_beta")
    }

    if(hasLocalBeta) {
        betaApi(name: betaLib, ext: 'aar')
        betaApi 'com.azure.android:azure-communication-common:1.1.0'
    }
    else {
        betaApi ("com.azure.android:azure-communication-calling:$azure_calling_sdk_version_beta")
    }

    if(hasLocalGA) {
        gaApi(name: gaLib, ext: 'aar')
        gaApi 'com.azure.android:azure-communication-common:1.1.0'
    } else {
        gaApi ("com.azure.android:azure-communication-calling:$azure_calling_sdk_version")
    }

    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.fragment:fragment-ktx:$androidx_fragment_ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraint_layout_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$androidx_navigation_fragment_ktx_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.9.0"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidx_lifecycle_viewmodel_ktx_version"
    implementation "com.microsoft.fluentui:fluentui_others:$microsoft_fluent_ui_version"
    implementation "com.microsoft.fluentui:fluentui_drawer:$microsoft_fluent_ui_version"
    implementation "com.microsoft.fluentui:fluentui_persona:$microsoft_fluent_ui_version"
    implementation "com.microsoft.fluentui:fluentui_transients:$microsoft_fluent_ui_version"

    api 'com.jakewharton.threetenabp:threetenabp:1.4.4'

    testImplementation "androidx.arch.core:core-testing:$androidx_core_testing_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-inline:$mockito_inline_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$jetbrains_kotlinx_coroutines_test_version"
    testImplementation('org.threeten:threetenbp:1.6.5') {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
    androidTestImplementation "androidx.test.ext:junit:$androidx_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidx_espresso_core_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$androidx_espresso_contrib_version"
    androidTestImplementation "androidx.test:rules:$androidx_test_rules_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$jetbrains_kotlinx_coroutines_test_version"
}
