import java.util.regex.Pattern
import java.util.regex.Matcher

// This class helps find FLAGS amongst the code
class FlagFileDefinition {
    String extension
    String startTag
    String endTag

    FlagFileDefinition(String extension, String startTag, String endTag) {
        this.extension = extension
        this.startTag = startTag
        this.endTag = endTag
    }

    def isStartLine(String line) {
        // If we see no flag, skip
        if (whatFlag(line).isEmpty()) {
            return false
        }

        // Start by getting rid of whitespace ie. "/* <FLAG_NAME>"
        // This will make it easier to identify the "/*" start tag here
        def trimmed1 = line.trim()

        // Not the right start tag? Then false
        if (!trimmed1.startsWith(startTag)) {
            return false
        }

        // Lets skip ahead past the start tag
        def trimmedLineAfterStartTag = trimmed1.substring(startTag.length()).trim()

        // Skip end tags
        if (trimmedLineAfterStartTag.startsWith("</")) {
            return false
        }

        if (!trimmedLineAfterStartTag.startsWith("<")) {
            return false
        }

        return true
    }

    def isEndLine(String line) {
        def trimmed2 = line.trim()
        if (!trimmed2.endsWith(endTag)) {
            return false
        }
        def substring2 = trimmed2.substring(0, trimmed2.length() - endTag.length()).trim()
        if (substring2.endsWith(">")) {
            return true
        }
        return false
    }

    def whatFlag(String line) {
        if (!line.contains(startTag) && !line.contains(endTag)) {
            return ""
        }

        def pattern = Pattern.compile("<(/?[A-Z_]+)(?::\\d+)?>")
        def matcher = pattern.matcher(line)

        if (matcher.find()) {
            def result = matcher.group(1).replace("/", "")
            return result
        }
        return ""
    }

    static def howMuchContext(String line) {
        // Find the number of context lines in <FLAG_NAME:3> or </FLAG_NAME:3>
        // Default to 0 if not found

        // Create a pattern to match :3 in <FLAG_NAME:3> or </FLAG_NAME:3>
        def pattern = Pattern.compile("<(/?\\w+):(\\d+)>")

        // Create a matcher for the line
        def matcher = pattern.matcher(line)

        // If a match is found, return the number of context lines
        if (matcher.find()) {
            return Integer.parseInt(matcher.group(2))
        }

        // If no match is found, return 0
        return 0
    }
}

ext.flagFileDefinitions = [
        new FlagFileDefinition('.kt', '/*', '*/'),
        new FlagFileDefinition('.java', '/*', '*/'),
        new FlagFileDefinition('.xml', '<!--', '-->')
]



// An actual hit on a flag
class FlagInstance {
    final File file
    final List<String> fileContent
    final FlagFileDefinition ffd
    final int startLine
    final int endLine

    FlagInstance(File file, List<String> fileContent, int startLine, int endLine, FlagFileDefinition ffd) {
        this.file = file
        this.startLine = startLine
        this.endLine = endLine
        this.fileContent = fileContent
        this.ffd = ffd
    }

    String toString() {
        return "";
    }

    def flagName() {
        return ffd.whatFlag(fileContent.get(startLine))
    }

    String print() {
        final flagContextTop = FlagFileDefinition.howMuchContext(fileContent.get(startLine))
        final flagContextBottom = FlagFileDefinition.howMuchContext(fileContent.get(startLine))
        final printStart = startLine - flagContextTop
        final printEnd = endLine + flagContextBottom

        String topContext = fileContent.subList(printStart, startLine).join("\n")
        String content = "+"+fileContent.subList(printStart, startLine).join("\n+")
        String bottomContext = fileContent.subList(endLine, printEnd).join("\n")

        def output = topContext + content + bottomContext
        println output
    }
}

// Scans the folder for flags
def getFlagsStatus() {
    List<FlagInstance> flags = []
    def projectDir = project.projectDir

    flagFileDefinitions.each { flagFileDefinition ->

        projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.(java|kt|xml)/) { file ->
            if (file.absolutePath.contains("build")) {
                return
            }

            if (!file.name.endsWith(flagFileDefinition.extension)) {
                return
            }

            def content = file.text
            def lines = content.readLines()
            def foundStart = false

            // Need to define variables to populate flagInstances
            int startLine = 0
            int endLine = 0

            lines.eachWithIndex { line, index ->
                if (!foundStart && flagFileDefinition.isStartLine(line)) {
                    foundStart = true
                    startLine = index

                } else if (foundStart && flagFileDefinition.isEndLine(line)) {
                    endLine = index
                    foundStart = false

                    def flagInstance = new FlagInstance(file, lines, startLine, endLine, flagFileDefinition)
                    flags.add(flagInstance)
                }


            }
        }
    }
    return flags
}

tasks.register('listFlags') {
    doLast {
        def flags = getFlagsStatus().collect({ it.flagName() }).unique()
        flags.each { value ->
            println value
        }
    }
}

tasks.register('flagHelp') {
    dependsOn('listFlags')
    doLast {
        def flags = getFlagsStatus()
        def exampleFlag = flags.keySet().iterator().next()

        println "Usage: ./gradlew [listFlags|enableFlag|disableFlag|printFlag] -PflagName=[flagName]"
        println "\nCommands:"
        println "  listFlags: Lists all the feature flags in your project and their current status."
        println "  enableFlag -PflagName=[flagName]: Enables the specified feature flag."
        println "  disableFlag -PflagName=[flagName]: Disables the specified feature flag."
        println "  printFlag -PflagName=[flagName]: Prints the lines of code that are within the context of the specified feature flag."
        println "\nExamples:"
        println "  ./gradlew listFlags"
        println "  ./gradlew enableFlag -PflagName=${exampleFlag}"
        println "  ./gradlew disableFlag -PflagName=${exampleFlag}"
        println "  ./gradlew printFlag -PflagName=${exampleFlag}"
    }
}

def updateFlagStatus(String flagName, boolean enable) {
    def flags = getFlagsStatus()
    boolean isEnabled = flags[flagName] == "Enabled"

    if (isEnabled == enable) {
        println "Flag '${flagName}' is already ${enable ? 'enabled' : 'disabled'}"
        return
    }

    project.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.(java|kt|xml)/) { File file ->
        String content = file.text
        boolean madeReplacement = false

        def flagFileDefinition = flagFileDefinitions.find { file.name.endsWith(it.extension) }
        if (flagFileDefinition == null) {
            println "Unsupported file type: ${file}"
            return
        }

        String startMarkerEnabled = "${flagFileDefinition.startTag} *<${flagName}> *${flagFileDefinition.endTag}"
        String endMarkerEnabled = "${flagFileDefinition.startTag} *</${flagName}> *${flagFileDefinition.endTag}"
        String startMarkerDisabled = "${flagFileDefinition.startTag} *<${flagName}>"
        String endMarkerDisabled = "</${flagName}> *${flagFileDefinition.endTag}"

        if (enable) {
            if (content.contains(startMarkerDisabled) || content.contains(endMarkerDisabled)) {
                println "Found disabled flag '${flagName}' in file: ${file}"
                content = content.replaceAll(Pattern.quote(startMarkerDisabled), Matcher.quoteReplacement(startMarkerEnabled))
                content = content.replaceAll(Pattern.quote(endMarkerDisabled), Matcher.quoteReplacement(endMarkerEnabled))
                madeReplacement = true
            }
        } else {
            if (content.contains(startMarkerEnabled) || content.contains(endMarkerEnabled)) {
                println "Found enabled flag '${flagName}' in file: ${file}"
                content = content.replaceAll(Pattern.quote(startMarkerEnabled), Matcher.quoteReplacement(startMarkerDisabled))
                content = content.replaceAll(Pattern.quote(endMarkerEnabled), Matcher.quoteReplacement(endMarkerDisabled))
                madeReplacement = true
            }
        }

        if (madeReplacement) {
            file.text = content
            println "File updated: ${file}"
        }
    }
}

tasks.register('enableFlag') {
    doFirst {
        if (!project.hasProperty('flagName')) {
            throw new GradleException("Flag name must be provided using the -PflagName=YOUR_FLAG_NAME argument.")
        }
    }
    doLast {
        String flagName = project.property('flagName')
        updateFlagStatus(flagName, true)
    }
}

tasks.register('disableFlag') {
    doFirst {
        if (!project.hasProperty('flagName')) {
            throw new GradleException("Flag name must be provided using the -PflagName=YOUR_FLAG_NAME argument.")
        }
    }
    doLast {
        String flagName = project.property('flagName')
        updateFlagStatus(flagName, false)
    }
}

tasks.register('printFlag') {
    doFirst {
        if (!project.hasProperty('flagName')) {
            throw new GradleException("Flag name must be provided using the -PflagName=YOUR_FLAG_NAME argument.")
        }
    }

    doLast {
        String flagName = project.property('flagName')
        Set<String> printedFiles = new HashSet<>()
        Pattern startPattern = Pattern.compile("/\\* <${flagName}(?::(\\d+))?>")
        Pattern endPattern = Pattern.compile("</${flagName}(?::(\\d+))?> \\*/")
        int defaultContextLines = 0

        project.projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.(java|kt|xml)/) { File file ->
            List<String> lines = file.readLines()
            boolean isReading = false
            int tagStart = -1
            int contextLinesBefore = defaultContextLines
            int contextLinesAfter = defaultContextLines

            lines.eachWithIndex { line, index ->
                Matcher startMatcher = startPattern.matcher(line)
                if (!isReading && startMatcher.find()) {
                    isReading = true
                    tagStart = index
                    contextLinesBefore = startMatcher.group(1) ? Integer.parseInt(startMatcher.group(1)) : defaultContextLines
                    int contextStart = Math.max(0, index - contextLinesBefore)
                    String fileLabel = "\nFile: ./${projectDir.relativePath(file)}"
                    if (!printedFiles.contains(fileLabel)) {
                        println fileLabel
                        printedFiles.add(fileLabel)
                    } else {
                        println "..."
                    }

                    lines.subList(contextStart, index).each { println "  ${it}" }
                }
                Matcher endMatcher = endPattern.matcher(line)
                if (isReading && endMatcher.find()) {
                    isReading = false
                    int tagEnd = index
                    contextLinesAfter = endMatcher.group(1) ? Integer.parseInt(endMatcher.group(1)) : defaultContextLines
                    int contextEnd = Math.min(lines.size(), tagEnd + contextLinesAfter + 1)
                    lines.subList(tagStart + 1, tagEnd).each { println "+ ${it}" }
                    lines.subList(tagEnd + 1, contextEnd).each { println "  ${it}" }
                }
            }
        }
    }
}