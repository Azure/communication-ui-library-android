import java.util.regex.Pattern
import java.util.regex.Matcher


/**
 * Gradle Script for Managing Feature Flags in Java/Kotlin Projects
 *
 * This script provides tasks to list and toggle feature flags in Java and Kotlin source files.
 * Feature flags are identified by markers in the source code.
 *
 * Usage:
 * 1. Include this script in your project's build.gradle file.
 * 2. Use the provided Gradle tasks to manage your feature flags:
 *    - `listFlags`: Lists all the feature flags and their current status (Enabled/Disabled).
 *    - `toggleFlag`: Toggles a specified feature flag between enabled and disabled states.
 *
 * Command Line Usage:
 * - To list all feature flags:
 *   ./gradlew listFlags
 *
 * - To toggle a specific feature flag (replace 'YOUR_FLAG_NAME' with the actual flag name):
 *   ./gradlew toggleFlag -PflagName=YOUR_FLAG_NAME
 */


// Task to list all feature flags and their status
def getFlagsStatus() {
    def flags = [:]
    def projectDir = project.projectDir
    def flagPattern = /\/\* <(.+?)> \*\//

    projectDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.(java|kt)/) { file ->
        def content = file.text
        content.eachLine { line ->
            def matcher = (line =~ flagPattern)
            if (matcher.find()) {
                String flagName = matcher.group(1)
                if (flagName.startsWith("/")) {
                    return
                }
                if (!flags.containsKey(flagName)) {
                    boolean isEnabled = !(content.contains("/* <${flagName}> */") && content.contains("/**/"))
                    flags[flagName] = isEnabled ? "Enabled" : "Disabled"
                }
            }
        }
    }
    return flags
}

task listFlags {
    doLast {
        def flags = getFlagsStatus()

        println "Feature Flags:"
        flags.each { key, value ->
            println "$key: $value"
        }
    }
}

task toggleFlag() {
    doFirst {
        if (!project.hasProperty('flagName')) {
            throw new GradleException("Flag name must be provided using the -PflagName=YOUR_FLAG_NAME argument.")
        }
    }

    doLast {
        String flagName = project.property('flagName')
        def flags = getFlagsStatus()
        boolean isEnabled = flags[flagName] == "Enabled"
        String startMarkerEnabled = "/* <${flagName}> */"
        String endMarkerEnabled = "/* </${flagName}> */"
        String startMarkerDisabled = "/* <${flagName}>"
        String endMarkerDisabled = "</${flagName}> */"

        FileTree files = fileTree(dir: 'src', includes: ['**/*.java', '**/*.kt'])

        files.each { File file ->
            String content = file.text
            boolean madeReplacement = false

            if (isEnabled) {
                if (content.contains(startMarkerEnabled) || content.contains(endMarkerEnabled)) {
                    println "Found enabled flag '${flagName}' in file: ${file}"
                    content = content.replaceAll(Pattern.quote(startMarkerEnabled), Matcher.quoteReplacement(startMarkerDisabled))
                    content = content.replaceAll(Pattern.quote(endMarkerEnabled), Matcher.quoteReplacement(endMarkerDisabled))
                    madeReplacement = true
                }
            } else {
                if (content.contains(startMarkerDisabled) || content.contains(endMarkerDisabled)) {
                    println "Found disabled flag '${flagName}' in file: ${file}"
                    content = content.replaceAll(Pattern.quote(startMarkerDisabled), Matcher.quoteReplacement(startMarkerEnabled))
                    content = content.replaceAll(Pattern.quote(endMarkerDisabled), Matcher.quoteReplacement(endMarkerEnabled))
                    madeReplacement = true
                }
            }

            if (madeReplacement) {
                file.text = content
                println "File updated: ${file}"
            } else {
                println "No changes made to file: ${file}"
            }
        }
    }
}

