// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    def getVersionCode = { ->
        return project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    }

    ext {
        ui_library_version_name = '1.0.0'
        ui_library_version_code = getVersionCode()

        kotlin_version = '1.7.10'
        jacoco_version = '0.8.7'
        junit_version = '4.13.2'

        androidx_activity_ktx_version = '1.4.0'
        androidx_appcompat_version = '1.4.1'
        androidx_constraint_layout_version = '2.1.4'
        androidx_core_ktx_version = '1.7.0'
        androidx_core_testing_version = '2.1.0'
        androidx_espresso_contrib_version = '3.4.0'
        androidx_espresso_core_version = '3.4.0'
        androidx_fragment_ktx_version = '1.4.1'
        androidx_junit_version = '1.1.3'
        androidx_lifecycle_viewmodel_ktx_version = '2.4.1'
        androidx_navigation_fragment_ktx_version = '2.4.2'
        androidx_test_rules_version = '1.4.1-alpha07'
        androidx_activity_compose_version = "1.5.1"

        if (project.rootProject.file('private_drop.properties').canRead()) {
            Properties privateDropProps = new Properties()
            privateDropProps.load(project.rootProject.file('private_drop.properties').newDataInputStream())
            azure_calling_sdk_version = privateDropProps.getProperty('PRIVATE_DROP_VERSION', '""')
        }
        else {
            azure_calling_sdk_version = '2.2.0'
        }

        azure_chat_sdk_version = '2.0.0'
        azure_common_sdk_version = '1.0.2'

        jetbrains_kotlinx_coroutines_test_version = '1.6.0-native-mt'

        microsoft_dualscreen_layout_version = '1.0.0-alpha01'
        microsoft_fluent_ui_version = '0.0.20'
        microsoft_fluent_ui_version_v2 = '0.1.2'

        mockito_inline_version = '4.3.1'
        mockito_kotlin_version = '4.0.0'

        shouldNotCheckTaskRoot = {
            return rootProject.hasProperty("disableTaskRootCheck") && rootProject.getProperty("disableTaskRootCheck")
        }

        androidx_activity_compose_version = '1.5.1'
        compose_version = '1.2.1'
        kotlin_compiler_extension_version = '1.3.1'
    }

    repositories {
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jacoco:org.jacoco.core:$jacoco_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "org.jlleitschuh.gradle.ktlint" version "10.2.1" apply(true)
}

allprojects {
    Properties localProps = new Properties()
    if (project.rootProject.file('local.properties').canRead()) {
        localProps.load(project.rootProject.file('local.properties').newDataInputStream())
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://pkgs.dev.azure.com/MicrosoftDeviceSDK/DuoSDK-Public/_packaging/Duo-SDK-Feed/maven/v1"
        }
        if (localProps.containsKey('GITHUB_MAVEN_REPO_URL')) {
            maven {
                name = 'privateGitHubRepo'
                url = localProps.getProperty('GITHUB_MAVEN_REPO_URL', '""')
                credentials {
                    username localProps.getProperty('GITHUB_MAVEN_REPO_USERNAME', '""')
                    password localProps.getProperty('GITHUB_MAVEN_REPO_PASSWORD', '""')
                }
            }
        }
    }
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply from: "../checkstyle.gradle"
    afterEvaluate {
        preBuild.dependsOn 'checkstyle'
        check.dependsOn 'checkstyle'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
